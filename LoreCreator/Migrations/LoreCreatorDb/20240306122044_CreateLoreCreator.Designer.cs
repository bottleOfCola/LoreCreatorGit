// <auto-generated />
using LoreCreator.DbStuff;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Net14Web.Migrations.LoreCreatorDb
{
    [DbContext(typeof(LoreCreatorDbContext))]
    [Migration("20240306122044_CreateLoreCreator")]
    partial class CreateLoreCreator
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ConnectionElement", b =>
                {
                    b.Property<int>("ConnectionsId")
                        .HasColumnType("int");

                    b.Property<int>("ElementsId")
                        .HasColumnType("int");

                    b.HasKey("ConnectionsId", "ElementsId");

                    b.HasIndex("ElementsId");

                    b.ToTable("ConnectionElement");
                });

            modelBuilder.Entity("ElementTag", b =>
                {
                    b.Property<int>("ElementsId")
                        .HasColumnType("int");

                    b.Property<int>("TagsId")
                        .HasColumnType("int");

                    b.HasKey("ElementsId", "TagsId");

                    b.HasIndex("TagsId");

                    b.ToTable("ElementTag");
                });

            modelBuilder.Entity("Net14Web.DbStuff.LoreCreator.Models.Connection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ConnectionTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ConnectionTypeId");

                    b.ToTable("Connections");
                });

            modelBuilder.Entity("Net14Web.DbStuff.LoreCreator.Models.ConnectionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ConnectionTypes");
                });

            modelBuilder.Entity("Net14Web.DbStuff.LoreCreator.Models.Element", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Elements");
                });

            modelBuilder.Entity("Net14Web.DbStuff.LoreCreator.Models.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("ConnectionElement", b =>
                {
                    b.HasOne("Net14Web.DbStuff.LoreCreator.Models.Connection", null)
                        .WithMany()
                        .HasForeignKey("ConnectionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Net14Web.DbStuff.LoreCreator.Models.Element", null)
                        .WithMany()
                        .HasForeignKey("ElementsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ElementTag", b =>
                {
                    b.HasOne("Net14Web.DbStuff.LoreCreator.Models.Element", null)
                        .WithMany()
                        .HasForeignKey("ElementsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Net14Web.DbStuff.LoreCreator.Models.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Net14Web.DbStuff.LoreCreator.Models.Connection", b =>
                {
                    b.HasOne("Net14Web.DbStuff.LoreCreator.Models.ConnectionType", "ConnectionType")
                        .WithMany()
                        .HasForeignKey("ConnectionTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ConnectionType");
                });
#pragma warning restore 612, 618
        }
    }
}
